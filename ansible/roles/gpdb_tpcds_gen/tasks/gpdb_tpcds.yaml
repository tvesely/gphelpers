---
- name: Clone TPC-DS
  git:
    repo: "{{ _gpdb_tpcds_config.tpcds_repo }}"
    dest: "{{ _gpdb_tpcds_config.tpcds_path }}"
    version: "{{ _gpdb_tpcds_config.tpcds_version }}"
    update: false

- name: Build dsdgen CLI tool
  command: "make -j8"
  args:
    chdir: "{{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/tools"

- name: Install dsqgen
  copy:
    src: "{{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/tools/dsqgen"
    dest: "{{ _gpdb_tpcds_config.tpcds_path }}/01_gen_data/dsqgen"
    mode: 0755
    remote_src: true
- name: Install dsdgen
  copy:
    src: "{{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/tools/dsdgen"
    dest: "{{ _gpdb_tpcds_config.tpcds_path }}/01_gen_data/dsdgen"
    mode: 0755
    remote_src: true
- name: Install tpcds.idx
  copy:
    src: "{{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/tools/tpcds.idx"
    dest: "{{ _gpdb_tpcds_config.tpcds_path }}/01_gen_data/tpcds.idx"
    mode: 0755
    remote_src: true

- name: Create tcp-ds folder
  file:
    path: "{{ _datagen_path }}"
    state: directory
    mode: 0755

- name: Generate tpc-ds datagen path names
  set_fact: path_item="{{item}}"
  with_sequence: start=1 end={{ _tpcds_parallelism }} format={{ _datagen_path }}/gen_data_%02d_of_{{ _tpcds_parallelism }}
  register: path_result
- set_fact:
    path_item:
      gpfdist_port: "{{ item.0 + _gpdb_tpcds_config.gpfdist_start_port }}"
      data_segment: "{{item.0+1}}"
      path: "{{item.1}}"
  with_indexed_items: "{{path_result.results | map(attribute='ansible_facts.path_item') | list}}" 
  register: path_result
- set_fact:
    datagen_directories: "{{ path_result.results | map(attribute='ansible_facts.path_item') | list }}"

- name: Run tpc-ds data generation with scale {{ _gpdb_tpcds_config.datagen_scale }} with parallelism {{ _tpcds_parallelism }}
  command: "{{ _gpdb_tpcds_config.tpcds_path }}/01_gen_data/generate_data.sh {{ _gpdb_tpcds_config.datagen_scale }} {{ item.data_segment }} {{ _tpcds_parallelism }} {{ item.path }}"
  args:
    creates: "{{ _datagen_path }}/datagen_done"
    chdir: "{{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/tools/"
  with_items: "{{datagen_directories}}"
  async: 86400
  poll: 0
  register: _create_instances

- name: Drop databases
  command: "dropdb {{ database }}"
  ignore_errors: yes
  with_items: "{{ _gpdb_tpcds_config.databases }}"
  loop_control:
    loop_var: database

- name: Create databases
  postgresql_db:
    name: "{{ database }}"
    login_host: "{{ _gpdb_tpcds_config.gpdb_env.PGHOST }}"
    login_user: "{{ _gpdb_tpcds_config.gpdb_env.PGUSER }}"
    port: "{{ _gpdb_tpcds_config.gpdb_env.PGPORT }}"
    maintenance_db: "{{ _gpdb_tpcds_config.gpdb_env.PGDATABASE }}"
  with_items: "{{ _gpdb_tpcds_config.databases }}"
  loop_control:
    loop_var: database

- name: Create tpcds schema
  command :  "psql -v ON_ERROR_STOP=1 {{ database }} -c 'CREATE SCHEMA tpcds;'"
  with_items: "{{ _gpdb_tpcds_config.databases }}"
  loop_control:
    loop_var: database

- name: Create ext_tpcds schema
  command :  "psql -v ON_ERROR_STOP=1 {{ database }} -c 'CREATE SCHEMA ext_tpcds;'"
  with_items: "{{ _gpdb_tpcds_config.databases }}"
  loop_control:
    loop_var: database

- name: Generate tcp-ds query0.sql
  command: "{{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/tools/dsqgen -input {{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/query_templates/templates.lst -directory {{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/query_templates -output {{ _gpdb_tpcds_config.tpcds_path }}/01_gen_data/ -dialect pivotal -scale {{ _gpdb_tpcds_config.datagen_scale }} -verbose y"
  args:
    chdir: "{{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/tools/"

- name: Generate tcp-ds queries with scale {{ _gpdb_tpcds_config.datagen_scale }}
  command: "{{ _gpdb_tpcds_config.tpcds_path }}/01_gen_data/generate_queries.sh {{ _gpdb_tpcds_config.datagen_scale }}"
  args:
    chdir: "{{ _gpdb_tpcds_config.tpcds_path }}/00_compile_tpcds/tools/"

- name: Get gpfdist host
  command :  "psql -v ON_ERROR_STOP=1 -t -A -c 'select inet_client_addr();'"
  register: hostname_cmd
- set_fact:
    _gpfdist_host: "{{ _is_kubernetes | ternary(_tpcds_kubernetes_service_address, hostname_cmd.stdout) }}"

- name: Create DDLs
  vars:
    database: "{{ item.0 }}"
    table: "{{ item.1 }}"
    gpfdist_host: "{{ _gpfdist_host }}"
  include_tasks: create_ddls.yaml
  with_nested:
    - "{{ _gpdb_tpcds_config.databases }}"
    - "{{ _gpdb_tpcds_config.tpcds_tables }}"

- name: Wait for tpc-dh datagen to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: _jobs
  until: _jobs.finished
  delay: 60 
  retries: 1440
  with_items: "{{ _create_instances.results }}"

- name: Touch datagen_done
  file:
    path: "{{ _datagen_path }}/datagen_done"
    state: touch

- name: Stop gpfdist
  command: "{{ _gpdb_tpcds_config.tpcds_path }}/04_load/stop_gpfdist.sh"

- name: Start gpfdist
  shell: "nohup gpfdist -p {{ datagen.gpfdist_port }} -d {{ datagen.path }} -b 0.0.0.0 > gpfdist.{{ datagen.gpfdist_port }}.log 2>&1 &"
  args:
    chdir: "/tmp/"
  with_items: "{{ datagen_directories }}"
  loop_control:
    loop_var: datagen

- name: Prepare tpc-ds batches
  find:
    paths: "{{ _gpdb_tpcds_config.tpcds_path }}/04_load/"
    use_regex: yes
    patterns: "^.*.gpdb.({{ _gpdb_tpcds_config.tpcds_tables | join('|') }}).sql"
  register: load_sql
- set_fact:
    datasets: 
      psql_file: "{{ item.path }}"
      table: "{{ item.path | regex_replace('^.*/\\d+\\.\\w+\\.([\\w_]+)\\.sql', '\\1')}}"
  with_items:
    - "{{ load_sql.files }}"
  register: datasets_result
- set_fact:
    psql_datasets: "{{ datasets_result.results | map(attribute='ansible_facts.datasets') | list}}"

# TODO: do not exceed max_connections
- name: Load data in batches of 5
  vars:
    database: "{{ item[0] }}"
    batch: "{{ item[1] }}"
  include_tasks: load_data_batch.yaml
  with_items:
    - "{{ _gpdb_tpcds_config.databases | product(psql_datasets | batch(5) | list) | list }}"

- name: Stop gpfdist
  command: "{{ _gpdb_tpcds_config.tpcds_path }}/04_load/stop_gpfdist.sh"
